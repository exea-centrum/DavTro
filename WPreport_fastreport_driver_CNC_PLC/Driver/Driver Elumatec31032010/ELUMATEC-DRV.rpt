[Record REPORT]
[CODE=ELUMATEC-DRV]
[C]code=ELUMATEC-DRV
[M]design=28402
<?xml version="1.0" encoding="utf-8"?>
<TfrxReport Version="4.9" DotMatrixReport="false" EngineOptions.DoublePass="true" IniFile="\Software\Fast Reports" PreviewOptions.AllowEdit="false" PreviewOptions.Buttons="4089" PreviewOptions.Zoom="1" PrintOptions.Printer="Par défaut" PrintOptions.PrintOnSheet="0" ReportOptions.CreateDate="40262.6410834375" ReportOptions.Description.Text="" ReportOptions.Name="ELUMATEC-DRV" ReportOptions.LastChange="40262.6410834375" ScriptLanguage="PascalScript" ScriptText.Text="var&#13;&#10;// Variables servant à charger les information du fichier Elusoft.ini                                                                                                                                                     &#13;&#10;FichierIni, BarFileDB, WorkFileDB, CheminLocal, CheminReseau, ListeScies, ListeMachines, TypeOptim : String;&#13;&#10;//Variables servant à la création du fichier&#13;&#10;ContenuFichierECW : String;&#13;&#10;&#13;&#10;const&#13;&#10;CRLF = Chr(13) + Chr(10);    &#13;&#10;TAB1 = '    ';&#13;&#10;TAB2 = TAB1 + TAB1;&#13;&#10;TAB3 = TAB1 + TAB1 + TAB1;                        &#13;&#10;//=======================================================================================================                                                                                                                                                                                                            &#13;&#10;{&#13;&#10;Fct FormatAddCar    &#13;&#10;Formate une chaîne de caractère à une longueur donnée en ajoutant n caractères après ou avant la chaine&#13;&#10;Si la chaine en entrée est plus longue que demandé, les premiers caractères sont conservés.                                                                                                                                                                                                                                                    &#13;&#10;Exemple : FormatAddCar(6,'xxx','a') renvoie la chaîne 'xxxaaa' où 6 correspond à la longueur finale&#13;&#10;Exemple : FormatAddCar(-6,'xxx','a') renvoie la chaîne 'aaaxxx'&#13;&#10;Exemple : FormatAddCar(4,'abcde','p') renvoie la chaîne 'abcd'                                 &#13;&#10;}  &#13;&#10;Function FormatAddCar(var FAClong : Integer;FACchaine : Variant;FACadd : variant):String;&#13;&#10;Var&#13;&#10;  NewStr : String;&#13;&#10;  NbCar : Integer;&#13;&#10;&#13;&#10;Begin&#13;&#10;  NewStr := FACchaine;&#13;&#10;  NbCar := Int(Abs(FAClong)) - Length(FACchaine);&#13;&#10;  If FACLong&#62;0 Then&#13;&#10;    Begin                         &#13;&#10;      If NbCar &#62;= 1 Then&#13;&#10;        Begin                  &#13;&#10;          While NbCar &#62;0 Do&#13;&#10;            Begin&#13;&#10;              NewStr := NewStr + FACadd;                                                        &#13;&#10;              Inc(NbCar, -1);&#13;&#10;            end;&#13;&#10;        End                              &#13;&#10;      Else&#13;&#10;        NewStr := Copy(NewStr, 1, FAClong);&#13;&#10;    End&#13;&#10;  Else&#13;&#10;    Begin                         &#13;&#10;      If NbCar &#62;= 1 Then&#13;&#10;        Begin                  &#13;&#10;          While NbCar &#62;0 Do&#13;&#10;            Begin&#13;&#10;              NewStr := FACadd + NewStr;                                                        &#13;&#10;              Inc(NbCar, -1);                                                           &#13;&#10;            end;&#13;&#10;        End                              &#13;&#10;      Else&#13;&#10;        NewStr := Copy(NewStr, 1, Int(Abs(FAClong)));&#13;&#10;    End;        &#13;&#10;  Result := NewStr;&#13;&#10;End;&#13;&#10;//=======================================================================================================&#13;&#10;Function EnteteFichier():String;&#13;&#10;var&#13;&#10;TmpEntete : String;                                          &#13;&#10;Begin&#13;&#10;    TmpEntete := ':ELUWORKS' + CRLF&#13;&#10;               + TAB1 + 'EVersion    = 1.10' + CRLF&#13;&#10;               + TAB1 + 'EVendorID   = 0' + CRLF&#13;&#10;               + TAB1 + 'EAxisType   = 0' + CRLF&#13;&#10;               + TAB1 + 'EUnitInch   = 0' + CRLF&#13;&#10;               + TAB1 + 'ETarget     = &#34;&#34;' + CRLF&#13;&#10;               + TAB1 + 'ESignature  = &#34;&#34;' + CRLF&#13;&#10;               + CRLF&#13;&#10;               + ':JOB' + CRLF    &#13;&#10;               + 'cncdriver = &#34;1.1elu&#34;' + CRLF    &#13;&#10;               + 'order     = &#34;' + FormatAddCar(-10,IntToStr(&#60;lot.&#34;lot&#34;&#62;),'0') +'&#34;' + CRLF    &#13;&#10;               + 'info      = &#34;' + &#60;lot.&#34;ligne&#34;&#62; +'&#34;' + CRLF  &#13;&#10;               + 'Var0      = 0.0 //' + CRLF   &#13;&#10;               + 'Var1      = 0.0 //' + CRLF   &#13;&#10;               + 'Var2      = 0.0 //' + CRLF   &#13;&#10;               + 'Var3      = 0.0 //' + CRLF   &#13;&#10;               + 'Var4      = 0.0 //' + CRLF   &#13;&#10;               + 'Var5      = 0.0 //' + CRLF   &#13;&#10;               + 'Var6      = 0.0 //' + CRLF   &#13;&#10;               + 'Var7      = 0.0 //' + CRLF   &#13;&#10;               + 'Var8      = 0.0 //' + CRLF   &#13;&#10;               + 'Var9      = 0.0 //' + CRLF;&#13;&#10;&#13;&#10;    Result := TmpEntete;                                                          &#13;&#10;End;&#13;&#10;//=======================================================================================================&#13;&#10;// Récupération des chargements de barres et coupes suivant optim WinPro                                                                                                                                                                             &#13;&#10;Function ChargerCoupesWP():String;&#13;&#10;var&#13;&#10;TmpCoupe, SqlCoupe : String;&#13;&#10;IndexeCUT : Integer;    &#13;&#10;Begin&#13;&#10;    SqlCoupe := Format('select profil, ligne, instruct,qte ,teinteext, teinteint, dim, numero, angle1, angle2 from detlot where lot = %d and scie in %s and instruct in (&#34;P&#34;,&#34;C&#34;)', [&#60;lot.&#34;lot&#34;&#62;, ListeScies]);&#13;&#10;    ReplaceSQL('detlot',SqlCoupe);                                &#13;&#10;    TmpCoupe := '';                      &#13;&#10;    FirstRecord('detlot');&#13;&#10;    while not QueryEOF('detlot') do  &#13;&#10;        Begin&#13;&#10;            if &#60;detlot.&#34;instruct&#34;&#62; = 'P' then&#13;&#10;                Begin&#13;&#10;                    IndexeCUT := 1;                                                                                                                    &#13;&#10;                    TmpCoupe := TmpCoupe&#13;&#10;                              + TAB1 + ':BAR' + CRLF&#13;&#10;                              + TAB1 + 'BIdentNo     = &#34;' + &#60;detlot.&#34;profil&#34;&#62; + '&#34;' + CRLF&#13;&#10;                              + TAB1 + 'BDescription = &#34;' + &#60;detlot.&#34;profil&#34;&#62; + &#60;detlot.&#34;teinteext&#34;&#62; + &#60;detlot.&#34;teinteint&#34;&#62; + '&#34;' + CRLF&#13;&#10;                              + TAB1 + 'BSurface     = &#34;&#34;' + CRLF&#13;&#10;                              + TAB1 + 'BLength      = ' + IntToStr(&#60;detlot.&#34;dim&#34;&#62;) + CRLF&#13;&#10;                              + TAB1 + 'BWidth       = 0.0' + CRLF&#13;&#10;                              + TAB1 + 'BHeigth      = 0.0' + CRLF&#13;&#10;                              + TAB1 + 'BFileDB      = &#34;' + BarFileDB + '&#34;' + CRLF&#13;&#10;                              + CRLF;                                     &#13;&#10;                End;&#13;&#10;            if &#60;detlot.&#34;instruct&#34;&#62; = 'C' then&#13;&#10;                Begin&#13;&#10;                    TmpCoupe := TmpCoupe&#13;&#10;                              + TAB2 + ':CUT' + CRLF&#13;&#10;                              + TAB2 + 'CNo          = ' + FormatAddCar(-5,IntToStr(IndexeCUT),'0') + CRLF&#13;&#10;                              + TAB2 + 'CStation     = 0' + CRLF      &#13;&#10;                              + TAB2 + 'CComNo       = 0' + CRLF                                   &#13;&#10;                              + TAB2 + 'CLength      = ' + IntToStr(&#60;detlot.&#34;dim&#34;&#62;) + CRLF&#13;&#10;                              + TAB2 + 'CDescription = &#34;' + &#60;detlot.&#34;numero&#34;&#62; + '&#34;' + CRLF  &#13;&#10;                              + TAB2 + 'CAngleLH     = ' + FormatFloat('0.0',&#60;detlot.&#34;angle1&#34;&#62;) + CRLF  &#13;&#10;                              + TAB2 + 'CAngleRH     = ' + FormatFloat('0.0',&#60;detlot.&#34;angle2&#34;&#62;) + CRLF  &#13;&#10;                              + TAB2 + 'CAngleLV     = 0' + CRLF  &#13;&#10;                              + TAB2 + 'CAngleRV     = 0' + CRLF  &#13;&#10;                              + TAB2 + 'CCopies      = ' + FormatFloat('0.0',&#60;detlot.&#34;qte&#34;&#62;) + CRLF     &#13;&#10;                              + TAB2 + 'CRotation    = 0' + CRLF  &#13;&#10;                              + TAB2 + 'CMirror      = 0' + CRLF  &#13;&#10;                              + TAB2 + 'CCorL        = 0.000000' + CRLF  &#13;&#10;                              + TAB2 + 'CCorR        = 0.000000' + CRLF  &#13;&#10;                              + TAB2 + 'COffsetZ     = 0.000000' + CRLF  &#13;&#10;                              + TAB2 + 'COffsetX     = 0.000000' + CRLF  &#13;&#10;                              + TAB2 + 'COffsetY     = 0.000000' + CRLF  &#13;&#10;                              + CRLF&#13;&#10;                              + ChargerUsinagesPiece(&#60;lot.&#34;lot&#34;&#62;, &#60;detlot.&#34;ligne&#34;&#62;);                                           &#13;&#10;                    IndexeCUT := IndexeCUT + 1                                                                                 &#13;&#10;                End;                                                    &#13;&#10;            NextRecord('detlot');            &#13;&#10;        end;&#13;&#10;    Result := TmpCoupe;                                          &#13;&#10;End;&#13;&#10;//=======================================================================================================    &#13;&#10;// Création section BAR groupées par profiles et couleurs                                                                                                                                                                                                                                                 &#13;&#10;Function ChargeProfilesC():String;&#13;&#10;var&#13;&#10;TmpProfile, SqlProfile, ProfileCourant, EnregistrementCourant : String;                                              &#13;&#10;Begin&#13;&#10;    SqlProfile := Format('select distinct profil,teinteext, teinteint, dim from detlot where lot = %d and scie in %s and instruct = &#34;P&#34;', [&#60;lot.&#34;lot&#34;&#62;, ListeScies]);&#13;&#10;    ReplaceSQL('detlot',SqlProfile);                                &#13;&#10;    TmpProfile := '';&#13;&#10;    ProfileCourant := '';&#13;&#10;    FirstRecord('detlot');&#13;&#10;    while not QueryEOF('detlot') do  &#13;&#10;        Begin&#13;&#10;            EnregistrementCourant := &#60;detlot.&#34;profil&#34;&#62; + &#60;detlot.&#34;teinteext&#34;&#62; + &#60;detlot.&#34;teinteint&#34;&#62;;                            &#13;&#10;            if EnregistrementCourant &#60;&#62; ProfileCourant then&#13;&#10;                Begin&#13;&#10;                    ProfileCourant := EnregistrementCourant;                                       &#13;&#10;                    TmpProfile := TmpProfile&#13;&#10;                                + TAB1 + ':BAR' + CRLF&#13;&#10;                                + TAB1 + 'BIdentNo     = &#34;' + &#60;detlot.&#34;profil&#34;&#62; + '&#34;' + CRLF&#13;&#10;                                + TAB1 + 'BDescription = &#34;' + ProfileCourant + '&#34;' + CRLF&#13;&#10;                                + TAB1 + 'BSurface     = &#34;&#34;' + CRLF&#13;&#10;                                + TAB1 + 'BLength      = ' + IntToStr(&#60;detlot.&#34;dim&#34;&#62;) + CRLF&#13;&#10;                                + TAB1 + 'BWidth       = 0.0' + CRLF&#13;&#10;                                + TAB1 + 'BHeigth      = 0.0' + CRLF&#13;&#10;                                + TAB1 + 'BFileDB      = &#34;' + BarFileDB + '&#34;' + CRLF&#13;&#10;                                + CRLF                              &#13;&#10;                                + ChargerCoupesC(&#60;detlot.&#34;profil&#34;&#62;, &#60;detlot.&#34;teinteext&#34;&#62;, &#60;detlot.&#34;teinteint&#34;&#62;);&#13;&#10;                End;&#13;&#10;           NextRecord('detlot');&#13;&#10;        end;&#13;&#10;    Result := TmpProfile;                                          &#13;&#10;End;    &#13;&#10;//=======================================================================================================&#13;&#10;// Création section CUT pour 1 profiles 1 couleur    &#13;&#10;Function ChargerCoupesC(BProfile : String; BClrExt : String; BClrInt : String):String;&#13;&#10;var&#13;&#10;TmpCoupe, SqlCoupe : String;&#13;&#10;IndexeCUT : Integer;                            &#13;&#10;Begin&#13;&#10;    SqlCoupe := 'select profil, ligne, instruct,qte ,teinteext, teinteint, dim, numero, angle1, angle2 '&#13;&#10;              + 'from detlot '   &#13;&#10;              + Format('where lot = %d and scie in %s and instruct =&#34;C&#34; and profil = &#34;%s&#34; and teinteext = &#34;%s&#34; and teinteint = &#34;%s&#34;', [&#60;lot.&#34;lot&#34;&#62;, ListeScies, BProfile, BClrExt, BClrInt]);&#13;&#10;    ReplaceSQL('detlotcoupec',SqlCoupe);                                &#13;&#10;    TmpCoupe := '';&#13;&#10;    IndexeCUT := 1;                      &#13;&#10;    FirstRecord('detlotcoupec');&#13;&#10;    while not QueryEOF('detlotcoupec') do  &#13;&#10;        Begin&#13;&#10;            TmpCoupe := TmpCoupe&#13;&#10;                + TAB2 + ':CUT' + CRLF&#13;&#10;                + TAB2 + 'CNo          = ' + FormatAddCar(-5,IntToStr(IndexeCUT),'0') + CRLF&#13;&#10;                + TAB2 + 'CStation     = 0' + CRLF      &#13;&#10;                + TAB2 + 'CComNo       = 0' + CRLF                                   &#13;&#10;                + TAB2 + 'CLength      = ' + IntToStr(&#60;detlotcoupec.&#34;dim&#34;&#62;) + CRLF&#13;&#10;                + TAB2 + 'CDescription = &#34;' + &#60;detlotcoupec.&#34;numero&#34;&#62; + '&#34;' + CRLF  &#13;&#10;                + TAB2 + 'CAngleLH     = ' + FormatFloat('0.0',&#60;detlotcoupec.&#34;angle1&#34;&#62;) + CRLF  &#13;&#10;                + TAB2 + 'CAngleRH     = ' + FormatFloat('0.0',&#60;detlotcoupec.&#34;angle2&#34;&#62;) + CRLF  &#13;&#10;                + TAB2 + 'CAngleLV     = 0' + CRLF  &#13;&#10;                + TAB2 + 'CAngleRV     = 0' + CRLF  &#13;&#10;                + TAB2 + 'CCopies      = ' + FormatFloat('0.0',&#60;detlotcoupec.&#34;qte&#34;&#62;) + CRLF     &#13;&#10;                + TAB2 + 'CRotation    = 0' + CRLF  &#13;&#10;                + TAB2 + 'CMirror      = 0' + CRLF  &#13;&#10;                + TAB2 + 'CCorL        = 0.000000' + CRLF  &#13;&#10;                + TAB2 + 'CCorR        = 0.000000' + CRLF  &#13;&#10;                + TAB2 + 'COffsetZ     = 0.000000' + CRLF  &#13;&#10;                + TAB2 + 'COffsetX     = 0.000000' + CRLF  &#13;&#10;                + TAB2 + 'COffsetY     = 0.000000' + CRLF  &#13;&#10;                + CRLF&#13;&#10;                + ChargerUsinagesPiece(&#60;lot.&#34;lot&#34;&#62;, &#60;detlotcoupec.&#34;ligne&#34;&#62;);&#13;&#10;                  &#13;&#10;            IndexeCUT := IndexeCUT + 1;                                                                                   &#13;&#10;            NextRecord('detlotcoupec');            &#13;&#10;        end;&#13;&#10;    Result := TmpCoupe;                                          &#13;&#10;End;  &#13;&#10;//=======================================================================================================    &#13;&#10;Function ChargerUsinagesPiece(NoLot : Integer; NoPiece : Integer):String;&#13;&#10;var      &#13;&#10;TmpUsinage, SqlUsi : String;                                            &#13;&#10;begin&#13;&#10;    SqlUsi := Format('select u.code, u.ligne, u.position from usglot u join usinage p on p.code = u.code where u.lot = %d and u.ligne = %d and p.numero in %s',[NoLot,NoPiece,ListeMachines]);&#13;&#10;    //SqlUsi := Format('select code, position from usglot where lot = %d and ligne = %d',[NoLot,NoPiece]);&#13;&#10;    ReplaceSQL('usglot', SqlUsi);                                              &#13;&#10;    TmpUsinage := '';&#13;&#10;    FirstRecord('usglot');&#13;&#10;    while not QueryEOF('usglot') do  &#13;&#10;        Begin&#13;&#10;            TmpUsinage := TmpUsinage&#13;&#10;                        + TAB2 + ':WORK' + CRLF    &#13;&#10;                        + TAB3 + 'WType     = &#34;X&#34;' + CRLF  &#13;&#10;                        + TAB3 + 'WPriority = 0' + CRLF  &#13;&#10;                        + TAB3 + 'WSide     = 0' + CRLF  &#13;&#10;                        + TAB3 + 'WX1       = ' + IntToStr(&#60;usglot.&#34;position&#34;&#62;) + CRLF  &#13;&#10;                        + TAB3 + 'WY1       = 0.0' + CRLF  &#13;&#10;                        + TAB3 + 'WHeight   = 0.0' + CRLF  &#13;&#10;                        + TAB3 + 'WDepthPost= 1' + CRLF  &#13;&#10;                        + TAB3 + 'WDepthSec = 1' + CRLF  &#13;&#10;                        + TAB3 + 'WDepth    = 0.0' + CRLF  &#13;&#10;                        + TAB3 + 'WFeed     = 1' + CRLF  &#13;&#10;                        + TAB3 + 'WMacro    = &#34;' + &#60;usglot.&#34;code&#34;&#62; + '&#34;' + CRLF  &#13;&#10;                        + TAB3 + 'WMirror   = 0' + CRLF  &#13;&#10;                        + TAB3 + 'WFileDB   = &#34;' + WorkFileDB + '&#34;' + CRLF  &#13;&#10;                        + TAB3 + 'WW1       = 0.0' + CRLF  &#13;&#10;                        + TAB3 + 'WW2       = 0.0' + CRLF  &#13;&#10;                        + TAB3 + 'WW3       = 0.0' + CRLF  &#13;&#10;                        + TAB3 + 'WW4       = 0.0' + CRLF  &#13;&#10;                        + TAB3 + 'WW5       = 0.0' + CRLF  &#13;&#10;                        + TAB3 + 'WW6       = 0.0' + CRLF  &#13;&#10;                        + TAB3 + 'WW7       = 0.0' + CRLF  &#13;&#10;                        + TAB3 + 'WW8       = 0.0' + CRLF  &#13;&#10;                        + CRLF;  &#13;&#10;            NextRecord('usglot');                                                                                                                                  &#13;&#10;        end;&#13;&#10;    Result := TmpUsinage;                  &#13;&#10;end;&#13;&#10;//=======================================================================================================&#13;&#10;Procedure EcrireFichier(CheminFichier : String);&#13;&#10;var&#13;&#10;NomFichierECW : String;&#13;&#10;FichierECW : TFileStream;                                                      &#13;&#10;begin&#13;&#10;    NomFichierECW := CheminFichier + Copy(&#60;lot.&#34;code&#34;&#62;,Length(&#60;lot.&#34;code&#34;&#62;) - 4,4) + '-' + &#60;lot.&#34;ligne&#34;&#62; + '.ecw';&#13;&#10;    FichierECW := TFileStream.Create(NomFichierECW, fmCreate or fmShareExclusive);&#13;&#10;    FichierECW.Write(ContenuFichierECW, length(ContenuFichierECW));      &#13;&#10;    FichierECW.Free;                    &#13;&#10;end;          &#13;&#10;//=======================================================================================================&#13;&#10;// Le paramètre TypeChemin vaut L pour local et R pour réseau                                                                                                                                                   &#13;&#10;Function FormatChemin(TypeChemin : String; Chemin : String) : String;&#13;&#10;begin&#13;&#10;    if Chemin &#60;&#62; '' then&#13;&#10;        begin                &#13;&#10;            // Chemin local&#13;&#10;            if TypeChemin = 'L' then&#13;&#10;                begin&#13;&#10;                    if (Chemin[1] + Chemin[2] &#60;&#62; '.\') and (Chemin[2] + Chemin[3] &#60;&#62; ':\') then&#13;&#10;                        begin&#13;&#10;                            if (Chemin[1] &#60;&#62; '.') and (Chemin[1] &#60;&#62; '\') then&#13;&#10;                                Chemin := '.\' + Chemin ;&#13;&#10;                            if (Chemin[1] &#60;&#62; '.') and (Chemin[1] = '\') then&#13;&#10;                                Chemin := '.' + Chemin ;&#13;&#10;                            if (Chemin[1] = '.') and (Chemin[1] &#60;&#62; '\') then&#13;&#10;                               insert('\',Chemin,2) ;                          &#13;&#10;                        end;&#13;&#10;                end;&#13;&#10;                                                                                              &#13;&#10;            // Chemin réseau                                                    &#13;&#10;            if TypeChemin = 'R' then&#13;&#10;                begin&#13;&#10;                   if Chemin[1] + Chemin[2] &#60;&#62; '\\' then&#13;&#10;                       begin&#13;&#10;                           if (Chemin[1] &#60;&#62; '\') and (Chemin[1] &#60;&#62; '\') then&#13;&#10;                               Chemin := '\\' + Chemin ;&#13;&#10;                           if (Chemin[1] = '\') and (Chemin[2] &#60;&#62; '\') then&#13;&#10;                               Chemin := '\' + Chemin ;&#13;&#10;                       end;&#13;&#10;                end;&#13;&#10;&#13;&#10;            // Fin de chemin                                                     &#13;&#10;            if Chemin[Length(Chemin)] &#60;&#62; '\' then&#13;&#10;                Chemin := Chemin + '\';                                            &#13;&#10;        end;  &#13;&#10;                                                      &#13;&#10;    Result := Chemin;                                          &#13;&#10;end; &#13;&#10;//=======================================================================================================&#13;&#10;Function IniChargerListe(Section : String) : String;&#13;&#10;var&#13;&#10;TmpListe, SectionEtCleIni : String;&#13;&#10;i, NbrElement : Integer;&#13;&#10;begin&#13;&#10;    NbrElement := IniReadInteger(FichierIni, Section +':Count','1');&#13;&#10;    TmpListe := '(';&#13;&#10;    i := 1;                  &#13;&#10;    while i &#60;= NbrElement do&#13;&#10;        begin&#13;&#10;            SectionEtCleIni := Section + ':' + IntToStr(i);                                                           &#13;&#10;            TmpListe := TmpListe + IniReadString(FichierIni,SectionEtCleIni,'') + ', ';&#13;&#10;            i := i + 1;                                    &#13;&#10;        end;&#13;&#10;    TmpListe := Copy(TmpListe, 0, Length(TmpListe)-2)  + ')';&#13;&#10;    Result := TmpListe;&#13;&#10;end;        &#13;&#10;//=======================================================================================================    &#13;&#10;  &#13;&#10;begin&#13;&#10;    // Chargement données fichier ini                                        &#13;&#10;    FichierIni := '.\Elusoft.ini';&#13;&#10;    BarFileDB := IniReadString(FichierIni,'BAR:BfileDB','');&#13;&#10;    WorkFileDB := IniReadString(FichierIni,'WORK:WfileDB','');&#13;&#10;    TypeOptim :=   IniReadString(FichierIni,'Optim:CalcOptim','Centre');                                  &#13;&#10;    CheminLocal := FormatChemin('L',IniReadString(FichierIni,'Chemin de base:chemin',''));&#13;&#10;    CheminReseau := FormatChemin('R',IniReadString(FichierIni,'Chemin reseau:chemin',''));&#13;&#10;    ListeScies :=  IniChargerListe('Scie');&#13;&#10;    if IniReadString(FichierIni,'Numero de machine:Machine','') = 'Scie' then&#13;&#10;        ListeMachines := ListeScies&#13;&#10;    else&#13;&#10;        ListeMachines := IniChargerListe('Numero de machine');&#13;&#10;                      &#13;&#10;    // Création du contenu du fichier suivant optim WinPro&#13;&#10;    if TypeOptim = 'WinPro' then                                                  &#13;&#10;        ContenuFichierECW := EnteteFichier() + ChargerCoupesWP();&#13;&#10;&#13;&#10;    // Création du contenu du fichier avec groupage profile-couleur avec usinage pour optimisation coupe par centre                                                                                                                                                                                  &#13;&#10;    if TypeOptim = 'Centre' then                                                  &#13;&#10;        ContenuFichierECW := EnteteFichier() + ChargeProfilesC();&#13;&#10;          &#13;&#10;    // Création du fichier local&#13;&#10;    if CheminLocal &#60;&#62; '' then&#13;&#10;        EcrireFichier(CheminLocal);&#13;&#10;&#13;&#10;    // Création du fichier réseau          &#13;&#10;    if CheminReseau &#60;&#62; '' then&#13;&#10;        EcrireFichier(CheminReseau);        &#13;&#10;                                                                                      &#13;&#10;end." StoreInDFM="false" OnReportPrint="frxReportOnReportPrint" PropData
  <TfrxDataPage Name="Data" Height="1000" Left="0" Top="0" Width="1000"/>
  <TfrxReportPage Name="Page1" Visible="false" PaperWidth="210" PaperHeight="297" PaperSize="9" LeftMargin="10" RightMargin="10" TopMargin="10" BottomMargin="10" ColumnWidth="0" ColumnPositions.Text="" PrintIfEmpty="false" HGuides.Text="" VGuides.Text=""/>
</TfrxReport>

[I]fr3=1
[C]lniptyoc7=2CBCED024EBF88212F64E334984A2D7D
[C]title=Driver pour centre d'usinage Elumatec
[End of REPORT]
[Record REPORTQRY]
[REPORT=ELUMATEC-DRV      0]
[C]database=DB
[C]datasource=localhost:atlantem
[C]name=DB
[M]params=13
%AUTOLOGIN%

[C]report=ELUMATEC-DRV
[C]type=D
[I]typedb=9
[End of REPORTQRY]
[Record REPORTQRY]
[REPORT=ELUMATEC-DRV      1]
[C]database=DB
[I]line=1
[C]name=lot
[C]report=ELUMATEC-DRV
[M]sqlmy=49
select lot,ligne,code from lot where lot = :order
[C]type=Q
[End of REPORTQRY]
[Record REPORTQRY]
[REPORT=ELUMATEC-DRV      2]
[C]database=DB
[I]line=2
[C]name=detlot
[C]report=ELUMATEC-DRV
[M]sqlmy=8
select 1
[C]type=Q
[End of REPORTQRY]
[Record REPORTQRY]
[REPORT=ELUMATEC-DRV      3]
[C]database=DB
[I]line=3
[C]name=usglot
[C]report=ELUMATEC-DRV
[M]sqlmy=8
select 1
[C]type=Q
[End of REPORTQRY]
[Record REPORTQRY]
[REPORT=ELUMATEC-DRV      4]
[C]database=DB
[I]line=4
[C]name=detlotcoupec
[C]report=ELUMATEC-DRV
[M]sqlmy=8
select 1
[C]type=Q
[End of REPORTQRY]
