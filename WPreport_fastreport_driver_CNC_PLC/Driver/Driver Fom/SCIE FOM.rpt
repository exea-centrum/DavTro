[Record REPORT]
[CODE=SCIE FOM]
[C]code=SCIE FOM
[M]design=33597
<?xml version="1.0" encoding="utf-8"?>
<TfrxReport Version="4.6.5" DotMatrixReport="false" EngineOptions.DoublePass="true" IniFile="\Software\Fast Reports" PreviewOptions.AllowEdit="false" PreviewOptions.Buttons="4089" PreviewOptions.Zoom="1" PrintOptions.Printer="Default" PrintOptions.PrintOnSheet="0" PrintOptions.ShowDialog="false" ReportOptions.CreateDate="39905,3669100231" ReportOptions.Description.Text="" ReportOptions.Name="SCIE FOM" ReportOptions.LastChange="39919,4054096181" ScriptLanguage="PascalScript" ScriptText.Text="Var    &#13;&#10;&#13;&#10;//************VARIABLES GENERALES************//                                         &#13;&#10;fichier : TFileStream;&#13;&#10;fichierIni, nomRepertoire, nomFichier, CrLf, codeLot, listescie, nomRepertoireCopie, nomFichierCopie : string;&#13;&#10;nomRepertoireCU, nomFichierCU, nomFichierCUCopie, nomlot : string;                                                                 &#13;&#10;numscie, nbrescie, numeroLot : integer;&#13;&#10;centaine, position : double;                                              &#13;&#10;&#13;&#10;//************VARIABLES DE TRAVAIL************//    &#13;&#10;Entete, Head, Body, reste, Cut, CutPce, Machinings, Fin : string;&#13;&#10;cleBarre, oldcleBarre, positionprofil, profil, couleur : string;&#13;&#10;sDetlot, sPDat, sCU, tmp : string;&#13;&#10;iqteProfil, QtePce, nbrePceIdentique, inverser :integer;&#13;&#10;posUsinage:array[1..20] of double;     &#13;&#10;&#13;&#10;//************COMPTEURS************//    &#13;&#10;iPce, i : integer;                                &#13;&#10;                                                                          &#13;&#10;                                 &#13;&#10;Function Right(var cadena : String; c : String; n : integer; m : integer) : String;   &#13;&#10;var&#13;&#10;i, d : integer;&#13;&#10;Begin      &#13;&#10;  If ( n &#62; 0) then        &#13;&#10;    begin              &#13;&#10;      i:=1;             &#13;&#10;      while i &#60;= n  do&#13;&#10;       begin&#13;&#10;          cadena := cadena + c;&#13;&#10;          inc(i,1)                          &#13;&#10;       end;&#13;&#10;     end&#13;&#10;   else&#13;&#10;     begin&#13;&#10;       cadena := Copy(cadena, 1, m);                                             &#13;&#10;     end;                   &#13;&#10;         &#13;&#10;   Result := cadena;     &#13;&#10;End;   &#13;&#10;&#13;&#10;Function Left(var cadena : String; c : String; n : integer; m : integer) : String;   &#13;&#10;var&#13;&#10;i, d : integer;&#13;&#10;Begin      &#13;&#10;  if ( n &#62; 0) then        &#13;&#10;    begin              &#13;&#10;      i:=1;             &#13;&#10;      while i &#60;= n  do&#13;&#10;       begin&#13;&#10;          cadena := c + cadena;  &#13;&#10;          inc(i,1)                          &#13;&#10;       end;&#13;&#10;     end&#13;&#10;    else&#13;&#10;      begin&#13;&#10;      cadena := Copy(cadena, 1, m);          &#13;&#10;      end;                &#13;&#10;       &#13;&#10;   Result := cadena;     &#13;&#10;End;     &#13;&#10;  &#13;&#10;  &#13;&#10;Begin&#13;&#10;SetDecimalSeparator('.');  &#13;&#10;//************CONSTITUTION DES REPERTOIRES ET FICHIERS************//                                                                                                                                                                                                                         &#13;&#10;   CrLf := CHR(13) + CHR(10);&#13;&#10;   // Définition du fichier Ini.&#13;&#10;   fichierIni := '.\\FOM.ini';&#13;&#10;&#13;&#10;   nbrescie := IniReadInteger(fichierIni, 'Scie:Count', '0');&#13;&#10;   for i := 1 to nbrescie-1 do&#13;&#10;   begin&#13;&#10;   numscie := IniReadInteger(fichierIni, 'Scie:' + IntToStr(i), '1');&#13;&#10;   listescie := listescie + IntToStr(numscie) + ', ';                                                            &#13;&#10;   end;&#13;&#10;   if nbrescie &#62; 0 then&#13;&#10;   begin               &#13;&#10;       numscie := IniReadInteger(fichierIni, 'Scie:' + IntToStr(nbrescie), '1');&#13;&#10;       listescie := listescie + IntToStr(numscie);&#13;&#10;   end;       &#13;&#10;     &#13;&#10;   //Création de la requête detlot                                                                       &#13;&#10;   sDetlot := 'select d.lot, d.ligne, d.profil, d.instruct, d.qte, d.dim, d.teinteint, d.teinteext, p.corrcoupe as hauteurprf, ';&#13;&#10;   sDetlot := sDetlot + 'd.commande, d.chassis, d.dimint, d.casier%1000 as casier, d.ouvrant, d.vantail, d.codebarre, d.refcli, c.nom, ';  &#13;&#10;   sDetlot := sDetlot + 'd.dormant, d.angle1, d.angle2, d.scie, d.position, l.code as nomlot ';    &#13;&#10;   sDetlot := sDetlot + 'from detlot d inner join profil p on d.profil = p.code inner join client c on d.client = c.code inner join lot l on d.lot = l.lot ';       &#13;&#10;   sDetlot := sDetlot + 'where d.scie in (' + listescie + ') and d.lot = ' + &#60;ORDER&#62; + ' ';&#13;&#10;   //sDetlot := sDetlot + 'where d.scie in (' + listescie + ') and d.lot = 199 ';                          &#13;&#10;   sDetlot := sDetlot + 'order by d.ligne, d.chassis, d.vantail, d.type, d.position';&#13;&#10;&#13;&#10;   ReplaceSQL('detlot',sDetlot);          &#13;&#10;   ExecSQL('detlot');          &#13;&#10;     &#13;&#10;   //Création de la requête usinage&#13;&#10;   sPDat := 'select scie, profil, teinteint, teinteext, sum(qte) as bqty ';&#13;&#10;   sPDat := sPDat + 'from detlot ';&#13;&#10;   sPDat := sPDat + 'where scie in (' + listescie + ') and lot = ' + &#60;ORDER&#62; + ' and instruct = ''P'' ';&#13;&#10;   //sPDat := sPDat + 'where scie in (' + listescie + ') and lot = 199 and instruct = ''P'' ';       &#13;&#10;   sPDat := sPDat + 'group by scie, profil, teinteint, teinteext ';    &#13;&#10;   sPDat := sPDat + 'order by scie, profil, teinteint, teinteext, ligne ';&#13;&#10;     &#13;&#10;   ReplaceSQL('PDat',sPDat);       &#13;&#10;   ExecSQL('PDat');                                                          &#13;&#10;&#13;&#10;   // Récupération des informations dans detlot.       &#13;&#10;   FirstRecord('detlot');&#13;&#10;   numeroLot := &#60;detlot.&#34;lot&#34;&#62;;       &#13;&#10;   if &#60;detlot.&#34;lot&#34;&#62; &#60;&#62; 0 then&#13;&#10;     begin&#13;&#10;       codeLot := IntToStr(numeroLot);                &#13;&#10;     end&#13;&#10;   else&#13;&#10;     begin&#13;&#10;       codeLot   := 'lot';                       &#13;&#10;     end;&#13;&#10;       &#13;&#10;   if &#60;detlot.&#34;nomlot&#34;&#62; &#60;&#62; '' then&#13;&#10;     begin&#13;&#10;     nomlot := &#60;detlot.&#34;nomlot&#34;&#62;;                               &#13;&#10;     end&#13;&#10;   else&#13;&#10;     begin&#13;&#10;     nomlot := codelot;                                               &#13;&#10;     end;               &#13;&#10;     &#13;&#10;&#13;&#10;   //Création de la requete de création du dbf     &#13;&#10;   nomFichierCU := IniReadString(fichierIni, 'Chemin Acces:Nom fichier Usinage', 'DATILAV');&#13;&#10;     &#13;&#10;   if FileExists('.\' + nomFichierCU + '.dbf') then&#13;&#10;     begin&#13;&#10;     DeleteFile('.\' + nomFichierCU + '.dbf');                       &#13;&#10;     end;              &#13;&#10;                                             &#13;&#10;   sCU := 'Create DBF ' + nomFichierCU + ' FREE '&#13;&#10;        + '(CODICE C(8), SIGLA C(13), CODLAV C(12), QUOTAX N(8,1), CODICEPRO N(8), LPEZZO N(10,2), SERIE C(12), SIMM N(1))';&#13;&#10;   ReplaceSQL('CU',sCU);       &#13;&#10;   ExecSQL('CU');            &#13;&#10;&#13;&#10;   //Création d'une seul répertoire par centaine&#13;&#10;   centaine := RoundEx((&#60;detlot.&#34;scie&#34;&#62;/100.0), 4);&#13;&#10;   centaine := centaine * 100.0;       &#13;&#10;     &#13;&#10;   // Constitution du nom du fichier.&#13;&#10;   nomRepertoire := IniReadString(fichierIni, 'Chemin Acces:FOM', '') + nomlot + '\Scie' + FloatToStr(centaine) + '\';                                        &#13;&#10;    &#13;&#10;   // Constitution du directory du lot&#13;&#10;   ForceDirectories(nomRepertoire);            &#13;&#10;&#13;&#10;   //Fichier XML                                  &#13;&#10;   nomFichier := nomRepertoire + 'JOB.xml';  &#13;&#10;   fichier := TFileStream.Create(nomFichier, fmCreate);       &#13;&#10;&#13;&#10;//************CONSTITUTION DE L'ENTETE DU FICHIER XML************//&#13;&#10;   Entete := '&#60;?xml version=&#34;1.0&#34; encoding=&#34;ISO-8859-1&#34; ?&#62;' + CrLf;&#13;&#10;   Entete := Entete + '&#60;JOB&#62;' + CrLf;&#13;&#10;   Entete := Entete + '&#60;VER&#62;' + CrLf;&#13;&#10;   Entete := Entete + '&#60;MJ&#62;1&#60;/MJ&#62;' + CrLf;&#13;&#10;   Entete := Entete + '&#60;MN&#62;0&#60;/MN&#62;' + CrLf;&#13;&#10;   Entete := Entete + '&#60;/VER&#62;' + CrLf;&#13;&#10;   fichier.Write(Entete, Length(Entete));       &#13;&#10;&#13;&#10;//************CONSTITUTION DE LA SECTION HEAD************//         &#13;&#10;   Head := '&#60;HEAD&#62;' + CrLf;&#13;&#10;   fichier.Write(Head, Length(Head));       &#13;&#10;&#13;&#10;   FirstRecord('PDat');&#13;&#10;   while not QueryEOF('PDat') do&#13;&#10;   begin&#13;&#10;       Head := '&#60;PDAT&#62;' + CrLf;                &#13;&#10;       Head := Head + '&#60;CODE&#62;' + &#60;PDat.&#34;profil&#34;&#62; + '&#60;/CODE&#62;' + CrLf;                                                                         &#13;&#10;       Head := Head + '&#60;DICL&#62;' + &#60;PDat.&#34;teinteint&#34;&#62; + '&#60;/DICL&#62;' + CrLf;&#13;&#10;       Head := Head + '&#60;DOCL&#62;' + &#60;PDat.&#34;teinteExt&#34;&#62; + '&#60;/DOCL&#62;' + CrLf;&#13;&#10;       Head := Head + '&#60;BQTY&#62;' + IntToStr(&#60;PDat.&#34;bqty&#34;&#62;) + '&#60;/BQTY&#62;' + CrLf;&#13;&#10;       Head := Head + '&#60;/PDAT&#62;' + CrLf;&#13;&#10;       fichier.Write(Head, Length(Head));&#13;&#10;       NextRecord('PDat');             &#13;&#10;   end;&#13;&#10;   Head := '&#60;/HEAD&#62;' + CrLf;  &#13;&#10;   fichier.Write(Head, Length(Head));        &#13;&#10;&#13;&#10;//************CONSTITUTION DE LA SECTION BODY************//       &#13;&#10;   Body := '&#60;BODY&#62;' + CrLf;       &#13;&#10;   fichier.Write(Body, Length(Body));  &#13;&#10;&#13;&#10;   iPce := 0;                             &#13;&#10;   FirstRecord('detlot');&#13;&#10;   //************Début de la boucle sur DetLot************//     &#13;&#10;   while not QueryEOF('detlot') do&#13;&#10;   begin&#13;&#10;     &#13;&#10;       nbrePceIdentique := 1;&#13;&#10;       //************Début du case sur les instructions************//           &#13;&#10;       case &#60;detlot.&#34;instruct&#34;&#62; of&#13;&#10;         'P': //************NOUVELLE BARRE ************//     &#13;&#10;         begin&#13;&#10;            //Si je ne suis pas au premier enregistrement&#13;&#10;            //et que je prend une barre,&#13;&#10;            //je peux écrire ma barre précédente.                                                                                             &#13;&#10;            if not (queryBOF('detlot')) then&#13;&#10;            begin&#13;&#10;               fichier.Write(Body, Length(Body));&#13;&#10;               fichier.Write(reste, Length(reste));&#13;&#10;               fichier.Write(CutPce, Length(CutPce));&#13;&#10;               Fin := '&#60;/BAR&#62;' + CrLf;&#13;&#10;               fichier.Write(Fin, Length(Fin));&#13;&#10;               CutPce := '';                                               &#13;&#10;            end;&#13;&#10;&#13;&#10;            qtePce := &#60;detLot.&#34;qte&#34;&#62;;                            &#13;&#10;              &#13;&#10;            Body := '&#60;BAR&#62;' + CrLf;&#13;&#10;            Body := Body + '&#60;BRAN&#62;XXXXXX&#60;/BRAN&#62;' + CrLf;&#13;&#10;            Body := Body + '&#60;SYST&#62;XXXXXX&#60;/SYST&#62;' + CrLf;&#13;&#10;            profil := IniReadString(fichierIni, 'Correspondance Profil FOM:' + &#60;detLot.&#34;profil&#34;&#62;, &#60;detLot.&#34;profil&#34;&#62;);                                                     &#13;&#10;            Body := Body + '&#60;CODE&#62;' + profil + '&#60;/CODE&#62;' + CrLf;&#13;&#10;            couleur := IniReadString(fichierIni, 'Correspondance Couleur FOM:' + &#60;detLot.&#34;teinteint&#34;&#62;, &#60;detLot.&#34;teinteint&#34;&#62;);                  &#13;&#10;            Body := Body + '&#60;DICL&#62;' + couleur + '&#60;/DICL&#62;' + CrLf;&#13;&#10;            couleur := IniReadString(fichierIni, 'Correspondance Couleur FOM:' + &#60;detLot.&#34;teinteext&#34;&#62;, &#60;detLot.&#34;teinteext&#34;&#62;);                &#13;&#10;            Body := Body + '&#60;DOCL&#62;' + couleur + '&#60;/DOCL&#62;' + CrLf;&#13;&#10;            Body := Body + '&#60;LEN&#62;' + Left(FormatFloat('0.0',&#60;detLot.&#34;dim&#34;&#62;), '', 7 - Length(FormatFloat('0.0',&#60;detLot.&#34;dim&#34;&#62;)), 7) + '&#60;/LEN&#62;' + CrLf;                                                                    &#13;&#10;                &#13;&#10;            reste := '&#60;H&#62;' +  Left(FormatFloat('0.0',&#60;detLot.&#34;hauteurprf&#34;&#62;), ' ', 5 - Length(FormatFloat('0.0',&#60;detLot.&#34;hauteurprf&#34;&#62;)), 5) + '&#60;/H&#62;' + CrLf;&#13;&#10;            reste := reste + '&#60;MLT&#62;' +  IntToStr(&#60;detLot.&#34;qte&#34;&#62;) + '&#60;/MLT&#62;' + CrLf;                                                                &#13;&#10;         end;&#13;&#10;         &#13;&#10;         'C': //************NOUVELLE PIECE************//&#13;&#10;         begin&#13;&#10;            iPce := iPce + 1;                                &#13;&#10;                                          &#13;&#10;            //************POSITION DU PROFIL************//&#13;&#10;            inverser := 0;                                                    &#13;&#10;            case &#60;detlot.&#34;position&#34;&#62; of&#13;&#10;               1 :&#13;&#10;               begin&#13;&#10;                 positionprofil := 'G';&#13;&#10;                 inverser := 1;                                                 &#13;&#10;               end;&#13;&#10;               2 :&#13;&#10;               begin&#13;&#10;                 positionprofil := 'D';                     &#13;&#10;               end;&#13;&#10;               3 :&#13;&#10;               begin&#13;&#10;                 positionprofil := 'H';&#13;&#10;                 inverser := 1;                                                 &#13;&#10;               end;&#13;&#10;               4 :&#13;&#10;               begin&#13;&#10;                 positionprofil := 'B';                     &#13;&#10;               end;&#13;&#10;               5 :&#13;&#10;               begin&#13;&#10;                 positionprofil := '|';                     &#13;&#10;               end;&#13;&#10;               6 :&#13;&#10;               begin&#13;&#10;                 positionprofil := '--';                     &#13;&#10;               end;&#13;&#10;               7 :&#13;&#10;               begin&#13;&#10;                 positionprofil := '/';                     &#13;&#10;               end;&#13;&#10;               8 :&#13;&#10;               begin&#13;&#10;                 positionprofil := '\\';                     &#13;&#10;               end;&#13;&#10;            end;          &#13;&#10;            //************FIN : POSITION DU PROFIL************//                &#13;&#10;                                                     &#13;&#10;            //************Boucle sur le nombre de Picèce************//                                    &#13;&#10;            for QtePce:=1 to &#60;detlot.&#34;qte&#34;&#62; do&#13;&#10;            begin                                                         &#13;&#10;              Cut := '&#60;CUT&#62;' + CrLf;                                                    &#13;&#10;              Cut := Cut + '&#60;ANGL&#62;' + FormatFloat('0.0',&#60;detlot.&#34;angle1&#34;&#62;) + '&#60;/ANGL&#62;' + CrLf;&#13;&#10;              Cut := Cut + '&#60;ANGR&#62;' + FormatFloat('0.0',&#60;detlot.&#34;angle2&#34;&#62;) + '&#60;/ANGR&#62;' + CrLf;&#13;&#10;              Cut := Cut + '&#60;IL&#62;' + FormatFloat('0.0',&#60;detlot.&#34;dimint&#34;&#62;) + '&#60;/IL&#62;' + CrLf;&#13;&#10;              Cut := Cut + '&#60;OL&#62;' + FormatFloat('0.0',&#60;detlot.&#34;dim&#34;&#62;) + '&#60;/OL&#62;' + CrLf;                &#13;&#10;  &#13;&#10;              //************USINAGES************//&#13;&#10;                &#13;&#10;              ReplaceParam('usinage:plot','ftInteger', &#60;detlot.&#34;lot&#34;&#62;);&#13;&#10;              ReplaceParam('usinage:pligne','ftInteger', &#60;detlot.&#34;ligne&#34;&#62;);&#13;&#10;              ReplaceParam('usinage:pmachine','ftInteger', 1);                &#13;&#10;              FirstRecord ('usinage');&#13;&#10;                                                                                &#13;&#10;              Machinings := '&#60;MACHININGS&#62;' + CrLf;                           &#13;&#10;                                                                           &#13;&#10;              //************Boucle sur les usinages réels************//                  &#13;&#10;              while not QueryEOF('usinage') do&#13;&#10;              begin&#13;&#10;                 i := 1;                                                                                  &#13;&#10;                 while i &#60;= 20 do&#13;&#10;                 begin&#13;&#10;                   if i = 1 then&#13;&#10;                     begin                                                                            &#13;&#10;                     position := &#60;usinage.&#34;position&#34;&#62;;      &#13;&#10;                     end&#13;&#10;                   else&#13;&#10;                     begin&#13;&#10;                     position := Report.GetDataset('usinage').Value('position' + IntToStr(i));                                                                            &#13;&#10;                     end;&#13;&#10;                   &#13;&#10;                   if position &#60;&#62; 0 then&#13;&#10;                     begin                                                                            &#13;&#10;                     if inverser = 1 then&#13;&#10;                       begin                         &#13;&#10;                       posUsinage[i] := &#60;detLot.&#34;dim&#34;&#62; - position;&#13;&#10;                       end                             &#13;&#10;                     else&#13;&#10;                       begin                                           &#13;&#10;                       posUsinage[i] := position;&#13;&#10;                       end;&#13;&#10;                     end&#13;&#10;                   else&#13;&#10;                     begin&#13;&#10;                     i := 20;                                               &#13;&#10;                     end;&#13;&#10;                   i := i + 1;                                                                            &#13;&#10;                 end;&#13;&#10;&#13;&#10;                 i := 1;                                      &#13;&#10;                 while i &#60;= 20 do&#13;&#10;                 begin&#13;&#10;                   if posUsinage[i] &#60;&#62; 0 then&#13;&#10;                     begin                               &#13;&#10;                     Machinings := Machinings + '&#60;MACHINING WCODE=&#34;' + &#60;usinage.&#34;outil&#34;&#62; + '&#34; OFFSET=&#34;' + FormatFloat('0.0',posUsinage[i]) + '&#34;/&#62;' + CrLf;&#13;&#10;                     sCU := 'insert into ' + nomFichierCU +  ' VALUES (''' + IntToStr(&#60;detlot.&#34;lot&#34;&#62;) + Left(IntToStr(iPce), '0', 5-Length(IntToStr(iPce)), 5) + ''', ''' + profil + ''' , '''&#13;&#10;                          + &#60;usinage.&#34;outil&#34;&#62; + ''', ' + FloatToStr(posUsinage[i]) + ', 0, ' + FloatToStr(&#60;detlot.&#34;dim&#34;&#62;) + ', '' '', 0)';&#13;&#10;                     ReplaceSQL('CU',sCU);       &#13;&#10;                     ExecSQL('CU');&#13;&#10;                     end&#13;&#10;                   else&#13;&#10;                     begin&#13;&#10;                     i:= 20;&#13;&#10;                   end;&#13;&#10;                   i := i + 1;                                               &#13;&#10;                 end;&#13;&#10;                   &#13;&#10;              NextRecord('usinage');                                     &#13;&#10;              end;&#13;&#10;              //************Fin de la boucle sur les usinages************//                  &#13;&#10;                                         &#13;&#10;              Machinings := Machinings + '&#60;/MACHININGS&#62;' + CrLf;&#13;&#10;              Cut := Cut + Machinings;                                     &#13;&#10;             &#13;&#10;             &#13;&#10;              //************MACHINE 100************//                  &#13;&#10;              ReplaceParam('usinage:plot','ftInteger', &#60;detlot.&#34;lot&#34;&#62;);&#13;&#10;              ReplaceParam('usinage:pligne','ftInteger', &#60;detlot.&#34;ligne&#34;&#62;);&#13;&#10;              ReplaceParam('usinage:pmachine','ftInteger', 100);                &#13;&#10;              FirstRecord ('usinage');&#13;&#10;              if RecordCount('usinage') &#62; 0 then&#13;&#10;              begin                                                               &#13;&#10;                if &#60;usinage.&#34;position&#34;&#62; &#60;&#62; 0 then           &#13;&#10;                begin&#13;&#10;                  Cut := Cut + '&#60;TRML&#62;' + FloatToStr(&#60;usinage.&#34;position&#34;&#62;) + '&#60;/TRML&#62;' + CrLf;                    &#13;&#10;                end;&#13;&#10;                if &#60;usinage.&#34;position&#34;2&#62; &#60;&#62; 0 then        &#13;&#10;                begin                   &#13;&#10;                  Cut := Cut + '&#60;TRMR&#62;' + FloatToStr(&#60;usinage.&#34;position2&#34;&#62;) + '&#60;/TRMR&#62;' + CrLf;  &#13;&#10;                end;&#13;&#10;                if &#60;usinage.&#34;position3&#34;&#62; &#60;&#62; 0 then        &#13;&#10;                begin&#13;&#10;                  Cut := Cut + '&#60;TAL&#62;' + FloatToStr(&#60;usinage.&#34;position3&#34;&#62;) + '&#60;/TAL&#62;' + CrLf;                    &#13;&#10;                end;&#13;&#10;                if &#60;usinage.&#34;position4&#34;&#62; &#60;&#62; 0 then        &#13;&#10;                begin&#13;&#10;                  Cut := Cut + '&#60;TAR&#62;' + FloatToStr(&#60;usinage.&#34;position4&#34;&#62;) + '&#60;/TAR&#62;' + CrLf;                    &#13;&#10;                end;                                    &#13;&#10;              end;          &#13;&#10;              //************FIN MACHINE 100************//                  &#13;&#10;                                        &#13;&#10;              Cut := Cut + '&#60;BCOD&#62;' + IntToStr(&#60;detlot.&#34;lot&#34;&#62;) + Left(IntToStr(iPce), '0', 5-Length(IntToStr(iPce)), 5) + '&#60;/BCOD&#62;' + CrLf;&#13;&#10;              Cut := Cut + '&#60;LBL&#62;' + Right(Trim(&#60;detlot.&#34;commande&#34;&#62;), ' ', 16 - Length(Trim(&#60;detlot.&#34;commande&#34;&#62;)), 16)  + '&#60;/LBL&#62;' + CrLf;                  &#13;&#10;              if &#60;detlot.&#34;dormant&#34;&#62; &#62; 0 then&#13;&#10;              begin                            &#13;&#10;                  Cut := Cut + '&#60;LBL&#62;Lot:' + IntToStr(&#60;detlot.&#34;lot&#34;&#62;) + ', ' + Right(Trim(&#60;detlot.&#34;chassis&#34;&#62;), ' ', 3 - Length(Trim(&#60;detlot.&#34;chassis&#34;&#62;)), 3) + '&#60;/LBL&#62;' + CrLf;&#13;&#10;              end                            &#13;&#10;              else&#13;&#10;              begin                                                                                                    &#13;&#10;                  Cut := Cut + '&#60;LBL&#62;Lot:' + IntToStr(&#60;detlot.&#34;lot&#34;&#62;) + ', ' + Right(Trim(&#60;detlot.&#34;chassis&#34;&#62;), ' ', 3 - Length(Trim(&#60;detlot.&#34;chassis&#34;&#62;)), 3) + '.' + Left(IntToStr(&#60;detlot.&#34;ouvrant&#34;&#62;), '0', 2 - Length(IntToStr(&#60;detlot.&#34;ouvrant&#34;&#62;)), 2) + '.' +  Left(IntToStr(&#60;detlot.&#34;vantail&#34;&#62;), '0', 2 - Length(IntToStr(&#60;detlot.&#34;vantail&#34;&#62;)), 2) + '&#60;/LBL&#62;' + CrLf;&#13;&#10;              end;                                      &#13;&#10;              Cut := Cut + '&#60;LBL&#62;' + Left(Trim(&#60;detlot.&#34;nom&#34;&#62;), ' ', 14 - Length(Trim(&#60;detlot.&#34;nom&#34;&#62;)), 14)  + '&#60;/LBL&#62;' + CrLf;                                                             &#13;&#10;              Cut := Cut + '&#60;LBL&#62;Casier:' + IntToStr(&#60;detlot.&#34;casier&#34;&#62;) + ', ' + positionprofil  + '&#60;/LBL&#62;' + CrLf;&#13;&#10;&#13;&#10;              CutPce := CutPce + Cut;                            &#13;&#10;            end;   &#13;&#10;            //************Fin de la boucle sur le nombre de Picèce************//&#13;&#10;                      &#13;&#10;            //************Placement du &#60;/CUT&#62;************//                &#13;&#10;            if &#60;detlot.&#34;qte&#34;&#62; &#62; 1 then&#13;&#10;            begin                        &#13;&#10;              for QtePce:=1 to &#60;detlot.&#34;qte&#34;&#62; do&#13;&#10;              begin&#13;&#10;                CutPce := CutPce + '&#60;/CUT&#62;' + CrLf;                      &#13;&#10;              end;&#13;&#10;            end                                            &#13;&#10;            else&#13;&#10;            begin&#13;&#10;              if QtePce &#62; 1 then&#13;&#10;              begin&#13;&#10;                       if nbrePceIdentique = QtePce then&#13;&#10;                       begin&#13;&#10;                               for i:=1 to nbrePceIdentique do&#13;&#10;                               begin&#13;&#10;                                       CutPce := CutPce + '&#60;/CUT&#62;' + CrLf;                          &#13;&#10;                               end;&#13;&#10;                               nbrePceIdentique := 1;                                                              &#13;&#10;                       end&#13;&#10;                       else&#13;&#10;                       begin&#13;&#10;                               nbrePceIdentique := nbrePceIdentique + 1;                                      &#13;&#10;                       end;                                      &#13;&#10;              end&#13;&#10;              else&#13;&#10;              begin&#13;&#10;                       CutPce := CutPce + '&#60;/CUT&#62;' + CrLf;                          &#13;&#10;              end;                                                                                                      &#13;&#10;            end;&#13;&#10;            //************Fin Placement du &#60;/CUT&#62;************//                                         &#13;&#10;         end;                                               &#13;&#10;         &#13;&#10;         else  //************RESTE************//                         &#13;&#10;         begin&#13;&#10;            reste := '&#60;LENR&#62;' + Left(FormatFloat('0.0',&#60;detlot.&#34;dim&#34;&#62;),' ' ,7 - Length(FormatFloat('0.0',&#60;detlot.&#34;dim&#34;&#62;)), 7) + '&#60;/LENR&#62;' + CrLf + reste;                &#13;&#10;         end;&#13;&#10;       end;&#13;&#10;       //************Fin du case sur les instructions************//&#13;&#10;   NextRecord('detlot');                &#13;&#10;   end;&#13;&#10;   //************Fin de la boucle sur DetLot************//&#13;&#10;   if RecordCount('detlot') &#62; 0 then&#13;&#10;   begin               &#13;&#10;       //Ecriture de la dernière Pièce&#13;&#10;      fichier.Write(Body, Length(Body));&#13;&#10;      fichier.Write(reste, Length(reste));&#13;&#10;      fichier.Write(CutPce, Length(CutPce));&#13;&#10;      Fin := '&#60;/BAR&#62;' + CrLf;&#13;&#10;      Fin := Fin + '&#60;/BODY&#62;' + CrLf;&#13;&#10;      Fin := Fin + '&#60;/JOB&#62;' + CrLf;      &#13;&#10;      fichier.Write(Fin, Length(Fin));&#13;&#10;   end&#13;&#10;   else&#13;&#10;   begin                                                  &#13;&#10;      Fin := '&#60;/BODY&#62;' + CrLf;&#13;&#10;      Fin := Fin + '&#60;/JOB&#62;' + CrLf;      &#13;&#10;      fichier.Write(Fin, Length(Fin));                        &#13;&#10;   end;&#13;&#10;   fichier.Free;&#13;&#10;&#13;&#10;  //************COPIE DU DBF AU BON ENDROIT************//&#13;&#10;  nomRepertoireCU := IniReadString(fichierIni, 'Chemin Acces:Path fichier Usinage', '') + nomlot + '\';      &#13;&#10;  if nomRepertoireCU &#60;&#62; ' ' then&#13;&#10;  begin                                                                             &#13;&#10;       ForceDirectories(nomRepertoireCU);&#13;&#10;       nomFichierCUCopie := nomRepertoireCU + nomFichierCU + '.dbf';&#13;&#10;       nomFichierCU := '.\' + nomFichierCU + '.DBF';           &#13;&#10;       CopyFile(nomFichierCU,nomFichierCUCopie);                                      &#13;&#10;  end;      &#13;&#10;    &#13;&#10;  //************REPERTOIRE DE COPIE************//                &#13;&#10;  nomRepertoireCopie := IniReadString(fichierIni, 'Chemin Acces Reseau:FOM', '') + nomlot + '\Scie' + FloatToStr(centaine) + '\';&#13;&#10;  if nomRepertoireCopie &#60;&#62; ' ' then&#13;&#10;    begin                   &#13;&#10;       if MessageDlg('Souhaitez-vous copier les fichiers sur disquette ?', mtconfirmation, mbyes+mbno, 0) = mryes then&#13;&#10;         begin&#13;&#10;         ForceDirectories(nomRepertoireCopie);&#13;&#10;         nomFichierCopie := nomRepertoireCopie + 'JOB.xml';               &#13;&#10;         CopyFile(nomFichier,nomFichierCopie);                                           &#13;&#10;         end;&#13;&#10;        nomRepertoireCU := IniReadString(fichierIni, 'Chemin Acces Reseau:Path fichier Usinage', '') + nomlot + '\';      &#13;&#10;        if nomRepertoireCU &#60;&#62; ' ' then&#13;&#10;        begin&#13;&#10;             nomFichierCUCopie := IniReadString(fichierIni, 'Chemin Acces Reseau:Nom fichier Usinage', 'DATILAV');                                                                                       &#13;&#10;             ForceDirectories(nomRepertoireCU);&#13;&#10;             nomFichierCUCopie := nomRepertoireCU + nomFichierCU + '.dbf';&#13;&#10;             nomFichierCU := '.\' + nomFichierCU + '.DBF';           &#13;&#10;             CopyFile(nomFichierCU,nomFichierCUCopie);                                      &#13;&#10;        end;                                &#13;&#10;    end;&#13;&#10;&#13;&#10;      &#13;&#10;        &#13;&#10;End." StoreInDFM="false" OnReportPrint="frxReportOnReportPrint" PropData
  <TfrxDataPage Name="Data" Height="1000" Left="0" Top="0" Width="1000"/>
  <TfrxReportPage Name="Page1" Visible="false" PaperWidth="210" PaperHeight="297" PaperSize="9" LeftMargin="0" RightMargin="0" TopMargin="0" BottomMargin="0" ColumnWidth="0" ColumnPositions.Text="" HGuides.Text="" VGuides.Text=""/>
</TfrxReport>

[I]fr3=1
[C]title=Driver scie FOM
[End of REPORT]
[Record REPORTQRY]
[REPORT=SCIE FOM          0]
[C]database=dbfox
[C]datasource=odbc_foxpro_wp
[C]name=dbfox
[C]report=SCIE FOM
[C]type=D
[I]typedb=6
[End of REPORTQRY]
[Record REPORTQRY]
[REPORT=SCIE FOM          1]
[C]database=dbfox
[I]line=1
[C]name=CU
[C]report=SCIE FOM
[C]type=Q
[End of REPORTQRY]
[Record REPORTQRY]
[REPORT=SCIE FOM          2]
[C]database=db
[I]line=2
[C]name=PDat
[C]report=SCIE FOM
[C]type=Q
[End of REPORTQRY]
[Record REPORTQRY]
[REPORT=SCIE FOM          3]
[C]database=db
[C]datasource=%SERVER%:%DB%
[I]line=3
[C]name=db
[M]params=13
%AUTOLOGIN%

[C]report=SCIE FOM
[C]type=D
[I]typedb=9
[End of REPORTQRY]
[Record REPORTQRY]
[REPORT=SCIE FOM          4]
[C]database=db
[I]line=4
[C]name=detlot
[C]report=SCIE FOM
[C]type=Q
[End of REPORTQRY]
[Record REPORTQRY]
[REPORT=SCIE FOM          5]
[C]database=db
[I]line=5
[C]name=usinage
[M]params=465
select u.outil, usg.position, usg.position2, usg.position3, usg.position4, usg.position5, usg.position6, 
 usg.position7, usg.position8, usg.position9, usg.position10, usg.position11, usg.position12, usg.position13, 
 usg.position14, usg.position15, usg.position16, usg.position17, usg.position18, usg.position19, usg.position20

 from usglot usg inner join usinage u on usg.code = u.code
 where usg.lot = :plot and usg.ligne = :pligne and u.numero = :pmachine
[C]report=SCIE FOM
[C]type=Q
[End of REPORTQRY]
